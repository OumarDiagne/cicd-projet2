name: Build et push images Docker
on: push
env:
  SERVER_PROD_IP: "162.19.78.126"
  SERVER_PROD_USER: root
jobs:
  tests-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: checkout code
        uses: actions/checkout@v4
      - name: install node
        uses: actions/setup-node@v3
        with:
          cache: "npm"
          cache-dependency-path: ./frontend/package-lock.json
      - name: install dependencies
        run: npm ci --prefer-offline
      - name: run linter
        run: npm run lint
      - name: npm audit
        run: npm audit --audit-level=moderate

  tests-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./node-api
    steps:
      - name: checkout code
        uses: actions/checkout@v4
      - name: install node
        uses: actions/setup-node@v3
        with:
          cache: "npm"
          cache-dependency-path: ./node-api/package-lock.json
      - name: install dependencies
        run: npm ci --prefer-offline
      - name: run linter
        run: npm run lint
      - name: npm audit
        run: npm audit fix --audit-level=moderate
      - name: exec les tests
        run: npm run test:ci
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: OumarDiagne/cicd-projet2
  fix-repo-name:
    runs-on: ubuntu-latest
    env:
      OWNER: "${{ github.repository_owner }}"
    steps:
      - name: set lower case owner name
        id: lower_repo
        run: |
          echo "OWNER_LC=${OWNER,,}" >>${GITHUB_OUTPUT}
    outputs:
      lowername: ${{ steps.lower_repo.outputs.OWNER_LC }}

  build-frontend-and-node-api:
    needs: [fix-repo-name, tests-backend, tests-frontend]
    runs-on: ubuntu-latest
    permissions:
      packages: write
    strategy:
      matrix:
        include:
          - context_name: "frontend"
            image_name: ghcr.io/${{ needs.fix-repo-name.outputs.lowername }}/cicd-projet2/frontend

          - context_name: "node-api"
            image_name: ghcr.io/${{ needs.fix-repo-name.outputs.lowername }}/cicd-projet2/node-api
    steps:
      - name: checkout code
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Récupération des métadonnées # Récupère les métadonnées pour Docker
        id: metadata # ID pour cette étape
        uses: docker/metadata-action@v5 # Utilise l'action de métadonnées
        with:
          images: ${{ matrix.image_name }} # Utilise le nom complet de l'image depuis la matrice
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ matrix.image_name }}:latest
          context: ./${{ matrix.context_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  e2e:
    needs: [build-frontend-and-node-api]
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: launch tests e2e
        run: |
          docker compose up --exit-code-from cypress --abort-on-container-exit
      - name: clean
        run: |
          docker compose down -v --remove-orphans

  deploy-production:
    needs: e2e
    runs-on: ubuntu-latest
    if: github.ref=='refs/heads/main'
    environment:
      name: production
      url: http://${{env.SERVER_PROD_IP}}
    steps:
      - name: checkout code
        uses: actions/checkout@v4
      - name: déployer sur le serveur
        uses: ./.github/actions/deploy
        with:
          vps_key: ${{ secrets.KEY_VPS }}
          server_ip: ${{ env.SERVER_PROD_IP }}
          token_github: ${{ secrets.GITHUB_TOKEN }}
